{"version":3,"sources":["firebase/config.js","hooks/useFirestore.js","comps/ImageGrid.js","comps/Modal.js","comps/Title.js","hooks/useStorage.js","comps/ProgressBar.js","comps/UploadForm.js","App.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","projectStorage","storage","projectFirestore","firestore","timestamp","FieldValue","serverTimestamp","useFirestore","collection","useState","docs","setDocs","useEffect","unsub","orderBy","onSnapshot","snap","documents","forEach","doc","push","data","id","ImageGrid","setSelectedImg","console","log","className","map","div","layout","whileHover","opacity","key","onClick","url","img","src","alt","initial","animate","transition","delay","Modal","selectedImg","e","target","classList","contains","y","Title","useStorage","file","progress","setProgress","error","setError","setUrl","storageRef","ref","name","collectionRef","put","on","percentage","bytesTransferred","totalBytes","err","a","getDownloadURL","createdAt","add","ProgressBar","setFile","width","UploadForm","types","type","onChange","selected","files","includes","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f952e3c6.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/storage\";\r\nimport \"firebase/firestore\";\r\n\r\nvar firebaseConfig = {\r\n  apiKey: \"AIzaSyDxgio7m-D-SJfRmbxSSEgr60KhSInEobo\",\r\n  authDomain: \"firegram-632de.firebaseapp.com\",\r\n  databaseURL: \"https://firegram-632de-default-rtdb.firebaseio.com\",\r\n  projectId: \"firegram-632de\",\r\n  storageBucket: \"firegram-632de.appspot.com\",\r\n  messagingSenderId: \"1086285206613\",\r\n  appId: \"1:1086285206613:web:4f63ccbdb06d38179530dc\",\r\n};\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nconst projectStorage = firebase.storage();\r\nconst projectFirestore = firebase.firestore();\r\nconst timestamp = firebase.firestore.FieldValue.serverTimestamp;\r\n\r\nexport { projectStorage, projectFirestore, timestamp };\r\n","import { useState, useEffect } from \"react\";\r\nimport { projectFirestore } from \"../firebase/config\";\r\n\r\nconst useFirestore = (collection) => {\r\n  const [docs, setDocs] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const unsub = projectFirestore\r\n      .collection(collection)\r\n      .orderBy(\"createdAt\", \"desc\")\r\n      .onSnapshot((snap) => {\r\n        let documents = [];\r\n        snap.forEach((doc) => {\r\n          documents.push({ ...doc.data(), id: doc.id });\r\n        });\r\n        setDocs(documents);\r\n      });\r\n\r\n    return () => unsub();\r\n  }, [collection]);\r\n  return { docs };\r\n};\r\n\r\nexport default useFirestore;\r\n","import React from \"react\";\r\nimport useFirestore from \"../hooks/useFirestore\";\r\nimport { motion } from \"framer-motion\";\r\n\r\nconst ImageGrid = ({ setSelectedImg }) => {\r\n  const { docs } = useFirestore(\"images\");\r\n  console.log(docs);\r\n\r\n  return (\r\n    <div className='img-grid'>\r\n      {docs &&\r\n        docs.map((doc) => (\r\n          <motion.div\r\n            className='img-wrap'\r\n            layout\r\n            whileHover={{ opacity: 1 }}\r\n            key={doc.id}\r\n            onClick={() => {\r\n              setSelectedImg(doc.url);\r\n            }}>\r\n            <motion.img\r\n              src={doc.url}\r\n              alt='uploaded pic'\r\n              initial={{ opacity: 0 }}\r\n              animate={{ opacity: 1 }}\r\n              transition={{ delay: 1 }}\r\n            />\r\n          </motion.div>\r\n        ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImageGrid;\r\n","import React from \"react\";\r\nimport { motion } from \"framer-motion\";\r\n\r\nconst Modal = ({ selectedImg, setSelectedImg }) => {\r\n  const handleClick = (e) => {\r\n    if (e.target.classList.contains(\"backdrop\")) {\r\n      setSelectedImg(null);\r\n    }\r\n  };\r\n  return (\r\n    <motion.div\r\n      className='backdrop'\r\n      onClick={handleClick}\r\n      initial={{ opacity: 0 }}\r\n      animate={{ opacity: 1 }}>\r\n      <motion.img\r\n        src={selectedImg}\r\n        alt='enlarged pic'\r\n        initial={{ y: \"-20vh\" }}\r\n        animate={{ y: 0 }}\r\n      />\r\n    </motion.div>\r\n  );\r\n};\r\n\r\nexport default Modal;\r\n","import React from 'react';\n\nconst Title = () => {\n  return (\n    <div className=\"title\">\n      <h1>FireGram</h1>\n      <h2>Your Pictures</h2>\n      <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>\n    </div>\n  )\n}\n\nexport default Title;","import { useState, useEffect } from \"react\";\r\nimport {\r\n  projectStorage,\r\n  projectFirestore,\r\n  timestamp,\r\n} from \"../firebase/config\";\r\n\r\nconst useStorage = (file) => {\r\n  const [progress, setProgress] = useState(0);\r\n  const [error, setError] = useState(null);\r\n  const [url, setUrl] = useState(null);\r\n\r\n  useEffect(() => {\r\n    //references\r\n    const storageRef = projectStorage.ref(file.name);\r\n    const collectionRef = projectFirestore.collection(\"images\");\r\n    storageRef.put(file).on(\r\n      \"state_changed\",\r\n      (snap) => {\r\n        let percentage = (snap.bytesTransferred / snap.totalBytes) * 100;\r\n        setProgress(percentage);\r\n      },\r\n      (err) => {\r\n        setError(err);\r\n      },\r\n      async () => {\r\n        const url = await storageRef.getDownloadURL();\r\n\r\n        const createdAt = timestamp();\r\n        collectionRef.add({ url, createdAt });\r\n        setUrl(url);\r\n      }\r\n    );\r\n  }, [file]);\r\n\r\n  return { progress, url, error };\r\n};\r\n\r\nexport default useStorage;\r\n","import React, { useEffect } from \"react\";\r\nimport useStorage from \"../hooks/useStorage\";\r\nimport { motion } from \"framer-motion\";\r\n\r\nconst ProgressBar = ({ file, setFile }) => {\r\n  const { url, progress } = useStorage(file);\r\n\r\n  useEffect(() => {\r\n    if (url) {\r\n      setFile(null);\r\n    }\r\n  }, [url, setFile]);\r\n  console.log(progress, url);\r\n  return (\r\n    <motion.div\r\n      className='progress-bar'\r\n      initial={{ width: 0 }}\r\n      animate={{ width: progress + \"%\" }}></motion.div>\r\n  );\r\n};\r\n\r\nexport default ProgressBar;\r\n","import React from \"react\";\r\nimport { useState } from \"react\";\r\nimport ProgressBar from \"./ProgressBar\";\r\n\r\nconst UploadForm = () => {\r\n  const [file, setFile] = useState(null);\r\n  const [error, setError] = useState(null);\r\n\r\n  const types = [\"image/png\", \"image/jpeg\", \"image/jpg\"];\r\n\r\n  const changeHandler = (e) => {\r\n    let selected = e.target.files[0];\r\n    if (selected && types.includes(selected.type)) {\r\n      setFile(selected);\r\n      setError(null);\r\n    } else {\r\n      setFile(null);\r\n      setError(\"Please select an image file (png or jpeg)\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form>\r\n      <label>\r\n        <input type='file' onChange={changeHandler} />\r\n        <span>+</span>\r\n      </label>\r\n      <div className='output'>\r\n        {error && <div className='error'>{error}</div>}\r\n        {file && <div>{file.name}</div>}\r\n        {file && <ProgressBar file={file} setFile={setFile} />}\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default UploadForm;\r\n","import React, { useState } from \"react\";\nimport ImageGrid from \"./comps/ImageGrid\";\nimport Modal from \"./comps/Modal\";\nimport Title from \"./comps/Title\";\nimport UploadForm from \"./comps/UploadForm\";\n\nfunction App() {\n  const [selectedImg, setSelectedImg] = useState(null);\n\n  return (\n    <div className='App'>\n      <Title />\n      <UploadForm />\n      <ImageGrid setSelectedImg={setSelectedImg} />\n      {selectedImg && (\n        <Modal selectedImg={selectedImg} setSelectedImg={setSelectedImg} />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA"],"sourceRoot":""}